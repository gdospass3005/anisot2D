MODULE mdle_bpar

IMPLICIT NONE

CONTAINS 
  SUBROUTINE bpar_left(nxp,acp,pvp,oVel,Nx,Nz,dx,dz,dt)
    IMPLICIT NONE
    INTEGER, INTENT(IN) :: Nx, Nz
    REAL, INTENT(IN) :: dx, dz, dt
    REAL, INTENT(IN),  DIMENSION(:,:) :: acp,oVel
    REAL, INTENT(INOUT),  DIMENSION(:,:) :: pvp
    REAL, INTENT(OUT), DIMENSION(:,:) :: nxp
    INTEGER :: ix,iz

     ! Borda paraxial esquerda
    ix=1
    DO iz=2,(Nz-1)
       nxp(ix,iz) = SQRT(oVel(ix,iz)) * (dt/dx) *&
         (acp(ix+1,iz)-acp(ix,iz)-(pvp(ix+2,iz)-pvp(ix+1,iz))) +&
         acp(ix,iz) + acp(ix+1,iz) - pvp(ix+1,iz)
    END DO
  END SUBROUTINE bpar_left

    
  SUBROUTINE bpar_right(nxp,acp,pvp,oVel,Nx,Nz,dx,dz,dt)
    IMPLICIT NONE
    INTEGER, INTENT(IN) :: Nx, Nz
    REAL, INTENT(IN) :: dx, dz, dt
    REAL, INTENT(IN),  DIMENSION(:,:) :: acp,oVel
    REAL, INTENT(INOUT),  DIMENSION(:,:) :: pvp
    REAL, INTENT(OUT), DIMENSION(:,:) :: nxp
    INTEGER :: ix,iz

    ! Borda paraxial direita
    ix=Nx
    DO iz=2,(Nz-1)
       nxp(ix,iz) = -SQRT(oVel(ix,iz)) * (dt/dx) *&
         (acp(ix,iz)-acp(ix-1,iz)-(pvp(ix-1,iz)-pvp(ix-2,iz))) +&
         acp(ix,iz) + acp(ix-1,iz) - pvp(ix-1,iz)
    END DO
  END SUBROUTINE bpar_right

    
  SUBROUTINE bpar_top(nxp,acp,pvp,oVel,Nx,Nz,dx,dz,dt)
    IMPLICIT NONE
    INTEGER, INTENT(IN) :: Nx, Nz
    REAL, INTENT(IN) :: dx, dz, dt
    REAL, INTENT(IN),  DIMENSION(:,:) :: acp,oVel
    REAL, INTENT(INOUT),  DIMENSION(:,:) :: pvp
    REAL, INTENT(OUT), DIMENSION(:,:) :: nxp
    INTEGER :: ix,iz
    
    ! Borda paraxial de cima
    iz=1
    DO ix=2,(Nx-1)
    
      nxp(ix,iz) = SQRT(oVel(ix,iz)) * (dt/dx) *&
        (acp(ix,iz+1)-acp(ix,iz)-(pvp(ix,iz+2)-pvp(ix,iz+1))) +&
        acp(ix,iz) + acp(ix,iz+1) - pvp(ix,iz+1)
    !   nxp(ix,iz) = 0 ! Free surface
    END DO
  END SUBROUTINE bpar_top

    
  SUBROUTINE bpar_bottom(nxp,acp,pvp,oVel,Nx,Nz,dx,dz,dt)
    IMPLICIT NONE
    INTEGER, INTENT(IN) :: Nx, Nz
    REAL, INTENT(IN) :: dx, dz, dt
    REAL, INTENT(IN),  DIMENSION(:,:) :: acp,oVel
    REAL, INTENT(INOUT),  DIMENSION(:,:) :: pvp
    REAL, INTENT(OUT), DIMENSION(:,:) :: nxp
    INTEGER :: ix,iz

    ! Borda paraxial de baixo
    iz=Nz
    DO ix=2,(Nx-1)
       nxp(ix,iz) = -SQRT(oVel(ix,iz)) * (dt/dx) *&
         (acp(ix,iz)-acp(ix,iz-1)-(pvp(ix,iz-1)-pvp(ix,iz-2))) +&
         acp(ix,iz) + acp(ix,iz-1) - pvp(ix,iz-1)
    END DO
  END SUBROUTINE bpar_bottom
END MODULE



MODULE mdle_io_utils

CONTAINS
  SUBROUTINE save_shotgather_n_snapshots(csg_ux,&
       next_ux,nphones,npmin_x,npmin_z,dnp_x,dnp_z,&
       isnap,nsnaps,snapmin,dsnap,n1,n3,Nx,Nz,it,itmax)
    IMPLICIT NONE
    REAL, DIMENSION(:,:), INTENT(INOUT) :: csg_ux
    REAL, DIMENSION(:,:), INTENT(IN)    :: next_ux
    INTEGER, INTENT(IN)    :: nphones
    INTEGER, INTENT(IN)    :: npmin_x,npmin_z,dnp_x,dnp_z
    INTEGER, INTENT(INOUT) :: isnap
    INTEGER, INTENT(IN)    :: nsnaps,snapmin,dsnap
    INTEGER, INTENT(IN)    :: n1,n3
    INTEGER, INTENT(IN)    :: Nx,Nz,it,itmax
    INTEGER :: i,j,ix,iz

    do i=1,nphones
       ix = (i-1)*dnp_x + npmin_x
       iz = (i-1)*dnp_z + npmin_z
       csg_ux(it,i) = next_ux(ix,iz)
    end do

    if (it == itmax) then  
       PRINT*,'Saving CSG'
       do i=1,nphones
          WRITE(n1, REC=i) csg_ux(:,i)
       end do
    end if

    if (it == (isnap * dsnap) + snapmin) then
       isnap=isnap+1
       if (isnap <= nsnaps) then
          PRINT*, 'Saving snapshot ',isnap,'/',nsnaps
          do i=1,Nx
             WRITE(n3, REC=((isnap -1)*Nx + i)) next_ux(i,:)
          end do
       end if
    end if

  END SUBROUTINE save_shotgather_n_snapshots

END MODULE mdle_io_utils
MODULE mdle_prop

IMPLICIT NONE

CONTAINS 
  SUBROUTINE prop_wave(nxp,acp,pvp,pVel,maxVel,&
       Nxm,Nx,Nzm,Nz,dx,dz,dt,t,lx,lz)
    IMPLICIT NONE
    INTEGER, INTENT(IN) :: Nxm, Nx, Nzm, Nz, lx, lz
    REAL, INTENT(IN) :: dx, dz, dt, maxVel, t
    REAL, INTENT(IN),  DIMENSION(:,:) :: acp,pVel
    REAL, INTENT(INOUT),  DIMENSION(:,:) :: pvp
    REAL, INTENT(OUT), DIMENSION(:,:) :: nxp
    REAL :: sc1,sc2,tfast
    INTEGER :: ix,iz

    sc1=(dt * dt)/(dx * dx)
    sc2=0.25*sc1
    tfast=(maxVel*t)**2

    DO ix=Nxm+1,Nx-1
       DO iz=Nzm+1,Nz-1
          IF (( ((ix-lx)*dx)**2+((iz-lz)*dz)**2 ) <= tfast ) THEN
             nxp(ix,iz) = sc1 * &
                  (acp(ix+1,iz) + acp(ix-1,iz) + acp(ix,iz+1) + acp(ix,iz-1)&
                  - 4.0*acp(ix,iz))

             nxp(ix,iz) = pVel(ix,iz)*nxp(ix,iz) +&
                  2.0 *acp(ix,iz)  - pvp(ix,iz)
          END IF

       END DO
    END DO


  END SUBROUTINE prop_wave

END MODULE
MODULE mdle_source

IMPLICIT NONE

CONTAINS
SUBROUTINE source_init(trs,dt,ns,fpeak,tdelay)
  IMPLICIT NONE
  REAL, INTENT(INOUT), DIMENSION(ns) :: trs
  INTEGER, INTENT(IN) :: ns
  REAL, INTENT(IN) :: dt, fpeak
  REAL, INTENT(OUT) :: tdelay
  INTEGER :: i
  REAL :: t,pi=3.141592653589793238462643383279502884197

  ! fpeak = fcut/(3*SQRT(pi))
  tdelay = 4.0 /(3.*fpeak*SQRT(2.*pi))

  do i=1,ns
     t=(i-1)*dt - tdelay
     trs(i) = (1 - 2*pi*(pi*fpeak*(t-tdelay))**2)*exp(-pi*(pi*fpeak*(t-tdelay))**2)
  end do

END SUBROUTINE source_init

END MODULE
MODULE mdle_taper

CONTAINS

SUBROUTINE bt_exp_create(taper,nb,F)
IMPLICIT NONE
  REAL :: F
  INTEGER :: nb
  REAL, DIMENSION(nb) :: taper
  INTEGER :: i

  DO i=1,nb
    taper(i) = exp( -(F*(REAL(nb) - REAL(i) ))**2 )
!    PRINT*, taper(i)
  END DO

END SUBROUTINE bt_exp_create


SUBROUTINE bt_apply(pp,Nx,Nz,nb,taper)
IMPLICIT NONE
  INTEGER :: NX,NZ,nb
  REAL, DIMENSION(nb) :: taper
  REAL, DIMENSION(NX,NZ) :: pp
  INTEGER :: i

  DO i=1,NZ
     pp(1:nb,i) = pp(1:nb,i) * taper
     pp(NX:NX-nb+1:-1,i) =  pp(NX:NX-nb+1:-1,i) * taper
  END DO

  DO i=1,NX
    pp(i,1:nb:1) = pp(i,1:nb:1) * taper
    pp(i,NZ:NZ-nb+1:-1) =  pp(i,NZ:NZ-nb+1:-1) * taper  
  END DO

END SUBROUTINE bt_apply


SUBROUTINE bt_apply_left(pp,Nx,Nz,nb,taper)
IMPLICIT NONE
  INTEGER :: NX,NZ,nb
  REAL, DIMENSION(nb) :: taper
  REAL, DIMENSION(NX,NZ) :: pp
  INTEGER :: i

  DO i=1,NZ
     pp(1:nb,i) = pp(1:nb,i) * taper
  END DO

END SUBROUTINE bt_apply_left


SUBROUTINE bt_apply_right(pp,Nx,Nz,nb,taper)
IMPLICIT NONE
  INTEGER :: NX,NZ,nb
  REAL, DIMENSION(nb) :: taper
  REAL, DIMENSION(NX,NZ) :: pp
  INTEGER :: i

  DO i=1,NZ
     pp(NX:NX-nb+1:-1,i) =  pp(NX:NX-nb+1:-1,i) * taper
  END DO

END SUBROUTINE bt_apply_right


SUBROUTINE bt_apply_top(pp,Nx,Nz,nb,taper)
IMPLICIT NONE
  INTEGER :: NX,NZ,nb
  REAL, DIMENSION(nb) :: taper
  REAL, DIMENSION(NX,NZ) :: pp
  INTEGER :: i

  DO i=1,NX
    pp(i,1:nb:1) = pp(i,1:nb:1) * taper
  END DO

END SUBROUTINE bt_apply_top


SUBROUTINE bt_apply_bottom(pp,Nx,Nz,nb,taper)
IMPLICIT NONE
  INTEGER :: NX,NZ,nb
  REAL, DIMENSION(nb) :: taper
  REAL, DIMENSION(NX,NZ) :: pp
  INTEGER :: i

  DO i=1,NX
    pp(i,NZ:NZ-nb+1:-1) =  pp(i,NZ:NZ-nb+1:-1) * taper  
  END DO

END SUBROUTINE bt_apply_bottom


END MODULE mdle_taper



PROGRAM acoustic

  USE mdle_source
  USE mdle_prop
  USE mdle_bpar
  USE mdle_taper
  USE mdle_io_utils

  !Last edit:              SSA, 17/04/2002. gfp.

  IMPLICIT NONE

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! VARIABLES DEFINITION
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  INTEGER :: Nx,Nz           ! grid shape
  REAL    :: dx, dz          ! x, z sample intervals
  INTEGER :: itmax           ! maximum time sample to compute
  REAL, DIMENSION(:,:), ALLOCATABLE  :: Vel
  REAL, DIMENSION(:,:), TARGET, ALLOCATABLE  :: pm,p,pp
  REAL, DIMENSION(:,:), POINTER :: prev_p,next_p,actl_p,swap
  REAL, DIMENSION(:), ALLOCATABLE :: taper
  REAL, DIMENSION(:), ALLOCATABLE :: trs       ! source memory function
  REAL, DIMENSION(:,:), ALLOCATABLE :: csg_P
  REAL :: dt              ! time sample interval
  REAL :: fpeak           ! peak frequency of ricker wavelet
  REAL :: t,tdelay        ! time, time shift of the source function
  INTEGER :: lx, lz       ! location of the source in grid units
  INTEGER :: nb           ! n. of boundary points
  REAL    :: F            ! absorption factor
  INTEGER :: dsnap             ! time samples between snapshots
  INTEGER :: nsnaps,snapmin    ! n. snapshots, 1st. snapshot
  INTEGER :: nphones,npmin_x,npmin_z,dnp_x,dnp_z  ! phone locations
  CHARACTER(LEN=20) :: infile='data.dat'
  CHARACTER(LEN=20) :: Velfile='model.ad'
  CHARACTER(LEN=20) :: reportfile='report.txt'  ! file for report
  INTEGER :: i,it,isnap   ! counters
  INTEGER :: n1,n2
  REAL :: maxVel
  INTEGER :: fsf=1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  PRINT*, 'ACOUSTIC: 2-D Finite difference modeling the acoustic wave &
       &equation'

  OPEN(25,FILE=infile,STATUS='UNKNOWN')

  READ(25,'(t10,i10)') Nx
  READ(25,'(t10,i10)') Nz
  READ(25,'(t10,i10)') itmax
  READ(25,'(t10,f10.4)') dx
  READ(25,'(t10,f10.4)') dt
  READ(25,'(t10,f10.4)') fpeak
  READ(25,'(t10,i10)') lx
  READ(25,'(t10,i10)') lz
  READ(25,'(t10,i10)') nsnaps
  READ(25,'(t10,i10)') snapmin
  READ(25,'(t10,i10)') dsnap
  READ(25,'(t10,i10)') nphones
  READ(25,'(t10,i10)') npmin_x
  READ(25,'(t10,i10)') npmin_z
  READ(25,'(t10,i10)') dnp_x
  READ(25,'(t10,i10)') dnp_z
  READ(25,'(t10,i10)') nb
  READ(25,'(t10,f10.4)') F

  dz=dx

  ALLOCATE(Vel(Nx,Nz))

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Uploading the velocity panel
  OPEN(34,FILE=Velfile,STATUS='UNKNOWN',ACCESS='DIRECT', &
       ACTION='READ', FORM='UNFORMATTED', RECL=Nz*4)
  DO i=1,Nx 
     READ(34, REC=i) Vel(i,:)
  END DO
  CLOSE(34)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  !/* compute density*velocity^2 and 1/density */
  maxVel = MAXVAL(Vel)
  Vel = Vel*Vel

  ! Initialize boundary taper
  ALLOCATE(taper(nb))
  CALL bt_exp_create(taper,nb,F)

  ! Initialize source vector
  ALLOCATE(trs(itmax))
  call source_init(trs,dt,itmax,fpeak,tdelay)

  n1=31; n2=32
  OPEN(n1,FILE="csg_p.ad",STATUS='UNKNOWN',ACCESS='DIRECT', &
       ACTION='WRITE', FORM='UNFORMATTED', RECL=itmax*4)
  OPEN(n2,FILE="snapshots_p.ad",STATUS='UNKNOWN',ACCESS='DIRECT', &
       ACTION='WRITE', FORM='UNFORMATTED', RECL=Nz*4)
  ALLOCATE(csg_P(itmax,nphones))

  ALLOCATE(pm(Nx,Nz))
  ALLOCATE(p(Nx,Nz))
  ALLOCATE(pp(Nx,Nz))
  prev_p => pm
  actl_p  => p
  next_p => pp

  prev_p = 0.
  actl_p = 0.
  next_p = 0.

  isnap = 0

  !/* Loop over time steps
  DO it=1,itmax
     !PRINT*, 'it=',it,'/',itmax,'  actl_p(lx,lz+10)=',actl_p(lx,lz+10)

     t = (it-1.)*dt
     OPEN(77,FILE="status.txt",STATUS='UNKNOWN',ACTION='WRITE')
     WRITE(77,*) &
          'acoustic - Modelling seismic waves in acoustic media'
     WRITE(77,*) &
          'Iteration',it,'/',itmax,' actl_p(lx+5,lz+5)=',actl_p(lx+5,lz+5)
     CLOSE(77)

     prev_p(lx,lz) = prev_p(lx,lz) + trs(it)

     !/* do one time step
     CALL prop_wave(next_p,actl_p,prev_p,Vel,maxVel,&
                     1,Nx,1,Nz,dx,dz,dt,t,lx,lz)

     !/* paraxial border (Reynolds)
     CALL bpar_left(next_p,actl_p,prev_p,Vel,&
                     Nx,Nz,dx,dz,dt)
     CALL bpar_right(next_p,actl_p,prev_p,Vel,&
                     Nx,Nz,dx,dz,dt)
     IF (fsf.ne.1) THEN
        CALL bpar_top(next_p,actl_p,prev_p,Vel,&
                     Nx,Nz,dx,dz,dt)
     END IF
     CALL bpar_bottom(next_p,actl_p,prev_p,Vel,&
                     Nx,Nz,dx,dz,dt)

     !/* boundary taper (Cerjan)
     !CALL bt_apply_left(next_p,Nx,Nz,nb,taper)
     !CALL bt_apply_right(next_p,Nx,Nz,nb,taper)
     ! CALL bt_apply_top(next_p,Nx,Nz,nb,taper)
     !CALL bt_apply_bottom(next_p,Nx,Nz,nb,taper)

     !/* save snapshot (actl_p) and update/save csg
     CALL save_shotgather_n_snapshots(csg_P,&
             actl_p,nphones,npmin_x,npmin_z,dnp_x,dnp_z,&
             isnap,nsnaps,snapmin,dsnap,n1,n2,Nx,Nz,it,itmax)

     !/* roll time slice pointers
     swap   => prev_p
     prev_p => actl_p
     actl_p => next_p
     next_p => swap

     !/* end of loop over time steps
  END DO


  !/* saves useful information in the report file
  OPEN(28,FILE=reportfile,STATUS='UNKNOWN')
  WRITE(28,*) 'ACOUSTIC: 2-D Finite difference modelling the acoustic wave &
       &equation'
  WRITE(28,*) ' '
  WRITE(28,*) '---REPORT--- '
  WRITE(28,*) ' '
  WRITE(28,*) 'Nx    =    ',Nx
  WRITE(28,*) 'Nz    =    ',Nz
  WRITE(28,*) 'dx    =    ',dx
  WRITE(28,*) 'dz    =    ',dz
  WRITE(28,*) ' '
  WRITE(28,*) ' '
  WRITE(28,*) 'itmax =    ',itmax
  WRITE(28,*) 'dt    =    ',dt
  WRITE(28,*) ' '
  WRITE(28,*) ' '
  WRITE(28,*) 'fpeak =    ',fpeak
  WRITE(28,*) 'tdelay=    ',tdelay


END PROGRAM acoustic







